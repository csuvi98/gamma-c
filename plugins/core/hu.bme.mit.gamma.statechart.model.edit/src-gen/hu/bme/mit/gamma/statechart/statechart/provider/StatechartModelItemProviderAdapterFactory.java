/**
 */
package hu.bme.mit.gamma.statechart.statechart.provider;

import hu.bme.mit.gamma.statechart.statechart.util.StatechartModelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StatechartModelItemProviderAdapterFactory extends StatechartModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StatechartModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.StatechartDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatechartDefinitionItemProvider statechartDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.StatechartDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatechartDefinitionAdapter() {
		if (statechartDefinitionItemProvider == null) {
			statechartDefinitionItemProvider = new StatechartDefinitionItemProvider(this);
		}

		return statechartDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.TimeoutDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeoutDeclarationItemProvider timeoutDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.TimeoutDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeoutDeclarationAdapter() {
		if (timeoutDeclarationItemProvider == null) {
			timeoutDeclarationItemProvider = new TimeoutDeclarationItemProvider(this);
		}

		return timeoutDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.StatechartReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatechartReferenceItemProvider statechartReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.StatechartReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatechartReferenceAdapter() {
		if (statechartReferenceItemProvider == null) {
			statechartReferenceItemProvider = new StatechartReferenceItemProvider(this);
		}

		return statechartReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.Region} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegionItemProvider regionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.Region}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegionAdapter() {
		if (regionItemProvider == null) {
			regionItemProvider = new RegionItemProvider(this);
		}

		return regionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.StateReferenceExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateReferenceExpressionItemProvider stateReferenceExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.StateReferenceExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateReferenceExpressionAdapter() {
		if (stateReferenceExpressionItemProvider == null) {
			stateReferenceExpressionItemProvider = new StateReferenceExpressionItemProvider(this);
		}

		return stateReferenceExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.ChoiceState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceStateItemProvider choiceStateItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.ChoiceState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceStateAdapter() {
		if (choiceStateItemProvider == null) {
			choiceStateItemProvider = new ChoiceStateItemProvider(this);
		}

		return choiceStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.MergeState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeStateItemProvider mergeStateItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.MergeState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeStateAdapter() {
		if (mergeStateItemProvider == null) {
			mergeStateItemProvider = new MergeStateItemProvider(this);
		}

		return mergeStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.ForkState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkStateItemProvider forkStateItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.ForkState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkStateAdapter() {
		if (forkStateItemProvider == null) {
			forkStateItemProvider = new ForkStateItemProvider(this);
		}

		return forkStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.JoinState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinStateItemProvider joinStateItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.JoinState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinStateAdapter() {
		if (joinStateItemProvider == null) {
			joinStateItemProvider = new JoinStateItemProvider(this);
		}

		return joinStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.InitialState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialStateItemProvider initialStateItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.InitialState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialStateAdapter() {
		if (initialStateItemProvider == null) {
			initialStateItemProvider = new InitialStateItemProvider(this);
		}

		return initialStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.RaiseEventAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RaiseEventActionItemProvider raiseEventActionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.RaiseEventAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRaiseEventActionAdapter() {
		if (raiseEventActionItemProvider == null) {
			raiseEventActionItemProvider = new RaiseEventActionItemProvider(this);
		}

		return raiseEventActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.SetTimeoutAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetTimeoutActionItemProvider setTimeoutActionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.SetTimeoutAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetTimeoutActionAdapter() {
		if (setTimeoutActionItemProvider == null) {
			setTimeoutActionItemProvider = new SetTimeoutActionItemProvider(this);
		}

		return setTimeoutActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.DeactivateTimeoutAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeactivateTimeoutActionItemProvider deactivateTimeoutActionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.DeactivateTimeoutAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeactivateTimeoutActionAdapter() {
		if (deactivateTimeoutActionItemProvider == null) {
			deactivateTimeoutActionItemProvider = new DeactivateTimeoutActionItemProvider(this);
		}

		return deactivateTimeoutActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.ShallowHistoryState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShallowHistoryStateItemProvider shallowHistoryStateItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.ShallowHistoryState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShallowHistoryStateAdapter() {
		if (shallowHistoryStateItemProvider == null) {
			shallowHistoryStateItemProvider = new ShallowHistoryStateItemProvider(this);
		}

		return shallowHistoryStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.DeepHistoryState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeepHistoryStateItemProvider deepHistoryStateItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.DeepHistoryState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeepHistoryStateAdapter() {
		if (deepHistoryStateItemProvider == null) {
			deepHistoryStateItemProvider = new DeepHistoryStateItemProvider(this);
		}

		return deepHistoryStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.AnyPortEventReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnyPortEventReferenceItemProvider anyPortEventReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.AnyPortEventReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnyPortEventReferenceAdapter() {
		if (anyPortEventReferenceItemProvider == null) {
			anyPortEventReferenceItemProvider = new AnyPortEventReferenceItemProvider(this);
		}

		return anyPortEventReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.PortEventReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortEventReferenceItemProvider portEventReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.PortEventReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortEventReferenceAdapter() {
		if (portEventReferenceItemProvider == null) {
			portEventReferenceItemProvider = new PortEventReferenceItemProvider(this);
		}

		return portEventReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.ClockTickReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockTickReferenceItemProvider clockTickReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.ClockTickReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClockTickReferenceAdapter() {
		if (clockTickReferenceItemProvider == null) {
			clockTickReferenceItemProvider = new ClockTickReferenceItemProvider(this);
		}

		return clockTickReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.TimeoutEventReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeoutEventReferenceItemProvider timeoutEventReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.TimeoutEventReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeoutEventReferenceAdapter() {
		if (timeoutEventReferenceItemProvider == null) {
			timeoutEventReferenceItemProvider = new TimeoutEventReferenceItemProvider(this);
		}

		return timeoutEventReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.BinaryTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryTriggerItemProvider binaryTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.BinaryTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryTriggerAdapter() {
		if (binaryTriggerItemProvider == null) {
			binaryTriggerItemProvider = new BinaryTriggerItemProvider(this);
		}

		return binaryTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.UnaryTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryTriggerItemProvider unaryTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.UnaryTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryTriggerAdapter() {
		if (unaryTriggerItemProvider == null) {
			unaryTriggerItemProvider = new UnaryTriggerItemProvider(this);
		}

		return unaryTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.OpaqueTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueTriggerItemProvider opaqueTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.OpaqueTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueTriggerAdapter() {
		if (opaqueTriggerItemProvider == null) {
			opaqueTriggerItemProvider = new OpaqueTriggerItemProvider(this);
		}

		return opaqueTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.OnCycleTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OnCycleTriggerItemProvider onCycleTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.OnCycleTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOnCycleTriggerAdapter() {
		if (onCycleTriggerItemProvider == null) {
			onCycleTriggerItemProvider = new OnCycleTriggerItemProvider(this);
		}

		return onCycleTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.gamma.statechart.statechart.TransitionIdAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionIdAnnotationItemProvider transitionIdAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.gamma.statechart.statechart.TransitionIdAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionIdAnnotationAdapter() {
		if (transitionIdAnnotationItemProvider == null) {
			transitionIdAnnotationItemProvider = new TransitionIdAnnotationItemProvider(this);
		}

		return transitionIdAnnotationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (statechartDefinitionItemProvider != null) statechartDefinitionItemProvider.dispose();
		if (timeoutDeclarationItemProvider != null) timeoutDeclarationItemProvider.dispose();
		if (statechartReferenceItemProvider != null) statechartReferenceItemProvider.dispose();
		if (regionItemProvider != null) regionItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (stateReferenceExpressionItemProvider != null) stateReferenceExpressionItemProvider.dispose();
		if (choiceStateItemProvider != null) choiceStateItemProvider.dispose();
		if (mergeStateItemProvider != null) mergeStateItemProvider.dispose();
		if (forkStateItemProvider != null) forkStateItemProvider.dispose();
		if (joinStateItemProvider != null) joinStateItemProvider.dispose();
		if (initialStateItemProvider != null) initialStateItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (raiseEventActionItemProvider != null) raiseEventActionItemProvider.dispose();
		if (setTimeoutActionItemProvider != null) setTimeoutActionItemProvider.dispose();
		if (deactivateTimeoutActionItemProvider != null) deactivateTimeoutActionItemProvider.dispose();
		if (shallowHistoryStateItemProvider != null) shallowHistoryStateItemProvider.dispose();
		if (deepHistoryStateItemProvider != null) deepHistoryStateItemProvider.dispose();
		if (anyPortEventReferenceItemProvider != null) anyPortEventReferenceItemProvider.dispose();
		if (portEventReferenceItemProvider != null) portEventReferenceItemProvider.dispose();
		if (clockTickReferenceItemProvider != null) clockTickReferenceItemProvider.dispose();
		if (timeoutEventReferenceItemProvider != null) timeoutEventReferenceItemProvider.dispose();
		if (binaryTriggerItemProvider != null) binaryTriggerItemProvider.dispose();
		if (unaryTriggerItemProvider != null) unaryTriggerItemProvider.dispose();
		if (opaqueTriggerItemProvider != null) opaqueTriggerItemProvider.dispose();
		if (onCycleTriggerItemProvider != null) onCycleTriggerItemProvider.dispose();
		if (transitionIdAnnotationItemProvider != null) transitionIdAnnotationItemProvider.dispose();
	}

}
